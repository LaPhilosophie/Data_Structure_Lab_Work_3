/*
实验三_二叉树相关操作的实现
【实验目的】
理解并掌握二叉树的逻辑结构和存储结构；
理解二叉树的建立与遍历算法；
编程实现二叉树相关的算法并进行验证；
学会利用二叉树解决实际问题。
【实验内容（必做）】
3.1 采用先序序列建立字符串ABC##DE#G##F###的二叉树的二叉链表，其中#代表空字符，
3.2实现对构建二叉树的先序、中序、后序遍历算法，输出对应的先序、中序、后序遍历序列
【实验内容（选做）】
假设用于通信的电文仅由8个字母组成，字母在电文中出现的频率分别为：
0.07、0.19、0.02、0.06、0.32、0.03、0.21和0.10
为这8个字母构造一棵哈夫曼树，并输出每个字母对应的哈夫曼编码。
*/
#include<iostream>
#include<stdio.h>
#include<string.h>
using namespace std;
typedef struct BiTNode
{
    char data;
    struct BiTNode *lchild,*rchild;
}BiTNode,*BiTree;
void InOrderTraverse_first(BiTree T)//先序遍历二叉树
{   

    if(T)
    {   
        cout<<T->data;
        InOrderTraverse_first(T->lchild);
        InOrderTraverse_first(T->rchild);
    }
}
void InOrderTraverse_media(BiTree T)//中序遍历二叉树
{   

    if(T)
    {
        InOrderTraverse_media(T->lchild);
        cout<<T->data;
        InOrderTraverse_media(T->rchild);
    }
}
void InOrderTraverse_last(BiTree T)//后序遍历二叉树
{   

    if(T)
    {
        InOrderTraverse_last(T->lchild);
        InOrderTraverse_last(T->rchild);
        cout<<T->data;
    }
}
void InitBiTree(BiTree &T)
{
    T=new BiTNode;
    T = NULL;
}
void CreatBiTree(BiTree &T)//先序遍历建立二叉链表
{
    char ch;
    cin >> ch;
    if(ch=='#')
        T = NULL;
    else
    {
        T=new BiTNode;
        T->data=ch;
        CreatBiTree(T->lchild);
        CreatBiTree(T->rchild);
    }
}
void Copy(BiTree T,BiTree &NewT)//复制二叉树
{
    if(T==NULL)
    {
        NewT=NULL;
        return;
    }
    else
    {
        NewT=new BiTNode;
        NewT->data=T->data;
        Copy(T->lchild,NewT->lchild);
        Copy(T->rchild,NewT->rchild);
    }
}
int Depth(BiTree T)//计算二叉树的深度
{
    int m, n;
    if(T==NULL)
        return 0;
    else
    {
        m=Depth(T->lchild);
        n=Depth(T->rchild);
        if(m>n)
            return (m+1);
        else
            return (n+1);
    }
}
int NodeCount(BiTree T)//统计二叉树节点的个数
{
    if(T==NULL)
        return 0;
    else
        return NodeCount(T->lchild) + NodeCount(T->rchild) + 1;
}

int main()
{
    BiTree T;
    CreatBiTree(T);
    InOrderTraverse_first(T);
    cout << endl;
    InOrderTraverse_media(T);
    cout << endl;
    InOrderTraverse_media(T);
    cout << endl;
    return 0;
}
 
